读《编程修养》
##############

:author: SeisMan
:date: 2014-03-06 19:55
:category: 编程
:tags: 读书, C

#. 版本和版权

   当需要将代码与他人共享时，版本和版权信息很有必要。对于一些私人的代码，文件的版本以及修改历史，可以通过git进行版本控制。文件和函数的描述，函数的输入、输出以及返回值有必要写清楚。

#. 缩进、空格、换行、空行、对齐

   - 对于缩进是使用空格还是tab键纠结了好久。最终决定使用4个空格进行缩进，同时将Tab键的长度设置为4，并且将Tab键自动转换为4个空格。


     对于vim，可以做如下设置::
        
        set tabstop=4   " Tab键的宽度
        set softtabstop=4 
        set shiftwidth=4    " 自动缩进的宽度
        set expandtab
        set autoindent
        set cindent
        set smarttab
        set smartindent
   
   - 已经养成了在函数参数间加空格的习惯，但是对于表达式，多余的空格有时反而使得语句难以阅读，且空格过多会使语句变长。
   - 若函数参数很多，在定义或声明函数时，可以使用每个参数单独一行的方式，以方便做注释，以及理清参数的个数和顺序。调用函数时不必如此。
   - 用Tab键将数据类型、变量名、注释分别对齐，的确要更好看一些。这种方式适用于每个变量单独定义一行的情况。

#. 注释

   单行注释用行注释，多行注释时用块注释。对于块注释需要嵌套时，再考虑使用\ ``#if 0``\ 和\ ``#endif``\ 这种方式。

#. 函数的[in][out] 参数

   很少对函数参数是否非法进行判断，assert更是没用过。

#. 对系统调用的返回进行判断

   已经养成此习惯。

#. if 语句对出错的处理

   的确，当正常处理代码很长时，很难注意到\ ``else``\ 部分。

#. 头文件中的#ifndef

   声明冲突的问题遇到过，尤其是当头文件中定义了全局变量并且对该变量进行初始化了。曾经被这个问题坑过。

#. 在堆上分配内存
   
   栈区由编译器自动分配释放，存放函数的参数值，局部变量的值等。一般来说栈的内存很小，大约是10 MB的量级。因而定义超大数组时会出现莫名的段错误。堆区的内存由程序员通过\ ``malloc``\ 和\ ``free``\ 进行释放。

   要求malloc和free尽量都在同一层中使用，在很多时候不太现实。

   malloc之后的内存除了要检测内存是否分配成功，还要对已分配内存进行初始化，一般使用memset函数，但是若可以确认内存分配后一定会赋值，则不必初始化。

   free后的指针，其值不为NULL，此时为野指针。应小心使用，设置为NULL更安全。

#. 变量的初始化

   的确，好的程序员知道哪些变量需要初始化,哪些则不需要。某些系统以及编译器会自动将未初始化的变量初始化为0，但是这个事情及其不靠谱，还是自己初始化比较安全。

#. h 和 c 文件的使用

   H文件和C文件最大的用处就是声明和实现分开。这一点很像HTML和CSS把结构和表现分离。带初始化的全局变量不要放在 H 文件中! \ ``sacio.c``\ 中的\ ``sac_null``\ 就存在这个问题。

#. 出错信息的处理

   小程序不适合那种管理错误信息的方式，而且声明一个错误代码全局变量可能有些危险。

#. 常用函数和循环语句中的被计算量

   学会利用static!

#. 函数名和变量名的命名

   试过两种风格，一种是全小写，以下划线对单词进行分割；另一种是单词首字母大小。最终选择了后者。

#. 函数的传值和传指针

   似懂非懂。

#. 修改别人程序的修养

   真心不想用别人写的程序，风格不同看起来真受伤。

#. 把相同或近乎相同的代码形成函数和宏

   平常注意整理!

#. 表达式中的括号

   从来不记优先级，一直靠的就是括号啊。

#. 函数参数中的 const

   不太习惯这种做法。

#. 函数的参数个数

   C语言的返回值只能是一个，在需要多个返回值时就必须使用指针，这很容易导致函数参数过多，这点很麻烦。结构体这东西，不是想定义就可以定义的，如果函数参数之间没有太多的联系，强制定义一个结构体，在函数调用的时候反而不方便。

#. 函数的返回类型,不要省略

   已经养成了好习惯。

#. goto 语句的使用

   不知道什么时候开始goto语句就已经被打入冷宫了。

#. 宏的使用

   只使用简单宏；对于复杂宏，只使用min、max这样的。

#. static 的使用

   理解，但是没有用过。

#. 函数中的代码尺寸

   函数过长导致难以看清代码的结构；函数过多，怎么设计参数传递好纠结。

#. typedef 的使用

   typedef可以大大缩短类型声明的长度，尤其是在声明结构体时。

#. 为常量声明宏

   几乎所有的常量都可以声明成宏。

#. 不要为宏定义加分号
#. || 和 && 的语句执行顺序
#. 尽量用for而不是while做循环

   使用for循环的确会更清晰一些，但是有些while转成for需要好好思考一下。

#. 请sizeof 类型而不是变量

   已经养成习惯。

#. 不要忽略 Warning

   作为一个强迫症患者，一直以来都是不能允许自己的C程序中有Warning存在的。

#. 书写Debug版和Release版的程序

   自从知道了DEBUG宏，就一直在使用。
